
#include<iostream>
#include <iomanip>
#include <cmath>

using namespace std;

#define INF	1000000

struct Point
{
	double x, y;
};

double Distance(Point p1, Point p2)
{
	return sqrt((p1.x - p2.x)*(p1.x - p2.x) + (p1.y - p2.y)*(p1.y - p2.y));
}

void swap(Point& a, Point& b)
{
	Point c;
	c = a;
	a = b;
	b = c;
}

void partition(Point* p, int l, int r, int pos)
{	
	int index = l;

	int pivot = int(l + r)/2;
	swap(p[pivot], p[r]);
	
	for (int i = l; i < r; i++)
	{
		if (p[r].x < p[i].x)
		{
			swap(p[i], p[index]);
			index++;
		}
	}
	swap(p[r], p[index]);

	if (index == pos)
		return;
	if (index > pos)
		partition(p, l, index - 1, pos);
	else if(index < pos)
		partition(p, index + 1, r, pos);
}

double ClosestPair(Point* p, int l, int r, Point &a, Point &b)
{
	Point pl1, pr1, pl2, pr2;
	if (r - l == 0)
		return INF;

	if (r - l == 1)
		return Distance(p[l], p[r]);
		
	double dl, dr, d;
	int mid = int(l + r) / 2;
	partition(p, l, r, mid);
	dl = ClosestPair(p, l, mid, pl1, pl2);
	dr = ClosestPair(p, mid + 1, r, pr1, pr2);

	if (dl < dr) { d = dl; a = pl1; b = pl2; }
	else { d = dr; a = pr1; b = pr2; }

	for (int i = l; i <= mid; i++)
	{
		if (abs(p[i].x - p[mid].x) >= d) continue;
		for (int j = mid + 1; j <= r; j++)
		{
			if (abs(p[j].x - p[mid].x) >= d || abs(p[j].y - p[i].y) >= d) continue;
			double d_temp = Distance(p[j], p[i]);
			d = d < d_temp ? d : d_temp;
			a = p[j], b = p[i];
		}
	}
	return d;
}


int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int num;
	cin >> num;
	Point* p = new Point[num];
	for (int i = 0; i < num; i++)
		cin >> p[i].x >> p[i].y;

	Point a, b;


	double dis = ClosestPair(p, 0, num - 1, a, b);
	cout << fixed << setprecision(2) << dis << endl;

	return 0;
}

